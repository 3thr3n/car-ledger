// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
  formDataBodySerializer,
} from '@hey-api/client-fetch';
import type {
  CallbackError,
  CallbackResponse,
  LoginError,
  LoginResponse,
  LogoutError,
  LogoutResponse,
  AddNewBillData,
  AddNewBillError,
  AddNewBillResponse,
  GetAllBillsData,
  GetAllBillsError,
  GetAllBillsResponse,
  DeleteBillData,
  DeleteBillError,
  DeleteBillResponse,
  GetMyCarsError,
  GetMyCarsResponse,
  CreateCarData,
  CreateCarError,
  CreateCarResponse,
  GetMyCarData,
  GetMyCarError,
  GetMyCarResponse,
  ImportCsvData,
  ImportCsvError,
  ImportCsvResponse,
  GetStatsAverageData,
  GetStatsAverageError,
  GetStatsAverageResponse,
  GetStatsHiLoData,
  GetStatsHiLoError,
  GetStatsHiLoResponse,
  GetStatsMinimalData,
  GetStatsMinimalError,
  GetStatsMinimalResponse,
  GetStatsTotalData,
  GetStatsTotalError,
  GetStatsTotalResponse,
  GetMyselfError,
  GetMyselfResponse,
} from './types.gen';

export const client = createClient(createConfig());

/**
 * Callback
 * This only for redirect purposes of oauth!
 */
export const callback = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CallbackResponse,
    CallbackError,
    ThrowOnError
  >({
    ...options,
    url: '/api/auth/callback',
  });
};

/**
 * Login
 * Here should the browser redirect, when 'login' is pressed
 */
export const login = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    LoginResponse,
    LoginError,
    ThrowOnError
  >({
    ...options,
    url: '/api/auth/login',
  });
};

/**
 * Logout
 * Logout current user
 */
export const logout = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    LogoutResponse,
    LogoutError,
    ThrowOnError
  >({
    ...options,
    url: '/api/auth/logout',
  });
};

/**
 * Add New Bill
 */
export const addNewBill = <ThrowOnError extends boolean = false>(
  options: Options<AddNewBillData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    AddNewBillResponse,
    AddNewBillError,
    ThrowOnError
  >({
    ...options,
    url: '/api/bill/{carId}',
  });
};

/**
 * Get All My Bills
 * Gets all bills for specified car
 */
export const getAllBills = <ThrowOnError extends boolean = false>(
  options: Options<GetAllBillsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllBillsResponse,
    GetAllBillsError,
    ThrowOnError
  >({
    ...options,
    url: '/api/bill/{carId}/all',
  });
};

/**
 * Delete Bill
 */
export const deleteBill = <ThrowOnError extends boolean = false>(
  options: Options<DeleteBillData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteBillResponse,
    DeleteBillError,
    ThrowOnError
  >({
    ...options,
    url: '/api/bill/{carId}/{billId}',
  });
};

/**
 * Get My Cars
 */
export const getMyCars = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetMyCarsResponse,
    GetMyCarsError,
    ThrowOnError
  >({
    ...options,
    url: '/api/car/my',
  });
};

/**
 * Create Car
 */
export const createCar = <ThrowOnError extends boolean = false>(
  options: Options<CreateCarData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    CreateCarResponse,
    CreateCarError,
    ThrowOnError
  >({
    ...options,
    url: '/api/car/my',
  });
};

/**
 * Get My Car
 */
export const getMyCar = <ThrowOnError extends boolean = false>(
  options: Options<GetMyCarData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetMyCarResponse,
    GetMyCarError,
    ThrowOnError
  >({
    ...options,
    url: '/api/car/my/{id}',
  });
};

/**
 * Import Csv
 * This is the description for the import of an csv of your bills.<br />
 * <br />
 * You need to add the csv and optionally the order in the csv (starts with 0).<br />
 * If you're not adding the order, the default is: day, unit, pricePerUnit, distance, estimate
 * separator between columns is ',' (comma)
 *
 */
export const importCsv = <ThrowOnError extends boolean = false>(
  options: Options<ImportCsvData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ImportCsvResponse,
    ImportCsvError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
    url: '/api/import/{carId}',
  });
};

/**
 * Get Average
 * Gets the average stats for Distance/Cost/PricePerUnit/Fuel Consumption
 */
export const getStatsAverage = <ThrowOnError extends boolean = false>(
  options: Options<GetStatsAverageData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetStatsAverageResponse,
    GetStatsAverageError,
    ThrowOnError
  >({
    ...options,
    url: '/api/stats/{carId}/average',
  });
};

/**
 * Get Hi Lo
 * Gets the highes and lowest stats for Unit/Distance/Cost/PricePerUnit/Fuel Consumption
 */
export const getStatsHiLo = <ThrowOnError extends boolean = false>(
  options: Options<GetStatsHiLoData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetStatsHiLoResponse,
    GetStatsHiLoError,
    ThrowOnError
  >({
    ...options,
    url: '/api/stats/{carId}/hi_lo',
  });
};

/**
 * Get Minimal Stats
 * Gets a small amount of stats to show in a dashboard
 */
export const getStatsMinimal = <ThrowOnError extends boolean = false>(
  options: Options<GetStatsMinimalData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetStatsMinimalResponse,
    GetStatsMinimalError,
    ThrowOnError
  >({
    ...options,
    url: '/api/stats/{carId}/minimal',
  });
};

/**
 * Get Total
 * Gets the accumulated stats for Unit/Distance/Cost
 */
export const getStatsTotal = <ThrowOnError extends boolean = false>(
  options: Options<GetStatsTotalData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetStatsTotalResponse,
    GetStatsTotalError,
    ThrowOnError
  >({
    ...options,
    url: '/api/stats/{carId}/total',
  });
};

/**
 * Get Me
 */
export const getMyself = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetMyselfResponse,
    GetMyselfError,
    ThrowOnError
  >({
    ...options,
    url: '/api/user/me',
  });
};
