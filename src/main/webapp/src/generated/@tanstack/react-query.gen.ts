// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import { queryOptions, type UseMutationOptions, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import type { GetApiAuthCallbackData, LoginByMethodData, LoginData, LoginError, LoginResponse, LogoutData, LogoutError, LogoutResponse, AddNewBillData, AddNewBillError, AddNewBillResponse, GetAllBillsData, GetAllBillsError, GetAllBillsResponse, DeleteBillData, DeleteBillError, DeleteBillResponse, CreateCarData, CreateCarError, CreateCarResponse, GetMyCarData, ImportCsvData, ImportCsvError, ImportCsvResponse, GetStatsAverageData, GetStatsHiLoData, GetStatsMinimalData, GetStatsTotalData } from '../types.gen';
import { client, getApiAuthCallback, getApiAuthCheckLogin, loginByMethod, login, logout, getApiAuthRegister, addNewBill, getAllBills, deleteBill, getMyCars, createCar, getMyCar, importCsv, getStatsAverage, getStatsHiLo, getStatsMinimal, getStatsTotal, getMyself } from '../services.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const getApiAuthCallbackQueryKey = (options?: Options<GetApiAuthCallbackData>) => [
    createQueryKey('getApiAuthCallback', options)
];

export const getApiAuthCallbackOptions = (options?: Options<GetApiAuthCallbackData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiAuthCallback({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiAuthCallbackQueryKey(options)
    });
};

export const getApiAuthCheckLoginQueryKey = (options?: Options) => [
    createQueryKey('getApiAuthCheckLogin', options)
];

export const getApiAuthCheckLoginOptions = (options?: Options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiAuthCheckLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiAuthCheckLoginQueryKey(options)
    });
};

export const loginByMethodQueryKey = (options: Options<LoginByMethodData>) => [
    createQueryKey('loginByMethod', options)
];

export const loginByMethodOptions = (options: Options<LoginByMethodData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loginByMethod({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginByMethodQueryKey(options)
    });
};

export const loginQueryKey = (options: Options<LoginData>) => [
    createQueryKey('login', options)
];

export const loginOptions = (options: Options<LoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await login({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginQueryKey(options)
    });
};

export const loginMutation = (options?: Partial<Options<LoginData>>) => {
    const mutationOptions: UseMutationOptions<LoginResponse, LoginError, Options<LoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await login({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const logoutQueryKey = (options?: Options<LogoutData>) => [
    createQueryKey('logout', options)
];

export const logoutOptions = (options?: Options<LogoutData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await logout({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: logoutQueryKey(options)
    });
};

export const logoutMutation = (options?: Partial<Options<LogoutData>>) => {
    const mutationOptions: UseMutationOptions<LogoutResponse, LogoutError, Options<LogoutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await logout({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiAuthRegisterQueryKey = (options?: Options) => [
    createQueryKey('getApiAuthRegister', options)
];

export const getApiAuthRegisterOptions = (options?: Options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiAuthRegister({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiAuthRegisterQueryKey(options)
    });
};

export const addNewBillMutation = (options?: Partial<Options<AddNewBillData>>) => {
    const mutationOptions: UseMutationOptions<AddNewBillResponse, AddNewBillError, Options<AddNewBillData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addNewBill({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAllBillsQueryKey = (options: Options<GetAllBillsData>) => [
    createQueryKey('getAllBills', options)
];

export const getAllBillsOptions = (options: Options<GetAllBillsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAllBills({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllBillsQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path,
            ...page.path
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query,
            ...page.query
        };
    }
    return params as unknown as typeof page;
};

export const getAllBillsInfiniteQueryKey = (options: Options<GetAllBillsData>): QueryKey<Options<GetAllBillsData>> => [
    createQueryKey('getAllBills', options, true)
];

export const getAllBillsInfiniteOptions = (options: Options<GetAllBillsData>) => {
    return infiniteQueryOptions<GetAllBillsResponse, GetAllBillsError, InfiniteData<GetAllBillsResponse>, QueryKey<Options<GetAllBillsData>>, number | Pick<QueryKey<Options<GetAllBillsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetAllBillsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getAllBills({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAllBillsInfiniteQueryKey(options)
    });
};

export const deleteBillMutation = (options?: Partial<Options<DeleteBillData>>) => {
    const mutationOptions: UseMutationOptions<DeleteBillResponse, DeleteBillError, Options<DeleteBillData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteBill({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMyCarsQueryKey = (options?: Options) => [
    createQueryKey('getMyCars', options)
];

export const getMyCarsOptions = (options?: Options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMyCars({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMyCarsQueryKey(options)
    });
};

export const createCarMutation = (options?: Partial<Options<CreateCarData>>) => {
    const mutationOptions: UseMutationOptions<CreateCarResponse, CreateCarError, Options<CreateCarData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createCar({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMyCarQueryKey = (options: Options<GetMyCarData>) => [
    createQueryKey('getMyCar', options)
];

export const getMyCarOptions = (options: Options<GetMyCarData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMyCar({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMyCarQueryKey(options)
    });
};

export const importCsvQueryKey = (options: Options<ImportCsvData>) => [
    createQueryKey('importCsv', options)
];

export const importCsvOptions = (options: Options<ImportCsvData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await importCsv({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: importCsvQueryKey(options)
    });
};

export const importCsvMutation = (options?: Partial<Options<ImportCsvData>>) => {
    const mutationOptions: UseMutationOptions<ImportCsvResponse, ImportCsvError, Options<ImportCsvData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await importCsv({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getStatsAverageQueryKey = (options: Options<GetStatsAverageData>) => [
    createQueryKey('getStatsAverage', options)
];

export const getStatsAverageOptions = (options: Options<GetStatsAverageData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStatsAverage({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getStatsAverageQueryKey(options)
    });
};

export const getStatsHiLoQueryKey = (options: Options<GetStatsHiLoData>) => [
    createQueryKey('getStatsHiLo', options)
];

export const getStatsHiLoOptions = (options: Options<GetStatsHiLoData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStatsHiLo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getStatsHiLoQueryKey(options)
    });
};

export const getStatsMinimalQueryKey = (options: Options<GetStatsMinimalData>) => [
    createQueryKey('getStatsMinimal', options)
];

export const getStatsMinimalOptions = (options: Options<GetStatsMinimalData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStatsMinimal({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getStatsMinimalQueryKey(options)
    });
};

export const getStatsTotalQueryKey = (options: Options<GetStatsTotalData>) => [
    createQueryKey('getStatsTotal', options)
];

export const getStatsTotalOptions = (options: Options<GetStatsTotalData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getStatsTotal({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getStatsTotalQueryKey(options)
    });
};

export const getMyselfQueryKey = (options?: Options) => [
    createQueryKey('getMyself', options)
];

export const getMyselfOptions = (options?: Options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMyself({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMyselfQueryKey(options)
    });
};